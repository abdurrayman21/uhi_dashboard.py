# -*- coding: utf-8 -*-
"""uhi_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-pElDkBc95sScNG129FKvK79B27OdkE
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

st.set_page_config(layout="wide")
st.title("🌆 Urban Heat Island Mitigation Dashboard")

# File uploader
uploaded_file = st.file_uploader("Upload the Urban Heat Island CSV Dataset", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Clean and process
    df['Land Cover'] = df['Land Cover'].astype('category').cat.codes
    df.dropna(inplace=True)

    # ------------------------- SIDEBAR -------------------------
    st.sidebar.header("Visualization Settings")
    show_raw = st.sidebar.checkbox("Show Raw Data", False)

    if show_raw:
        st.subheader("Raw Dataset")
        st.write(df.head())

    # ------------------------ EDA -----------------------------
    st.subheader("📊 Exploratory Visualizations")

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**Urban Temperature Distribution**")
        fig1 = sns.histplot(df['Temperature (°C)'], kde=True)
        st.pyplot(fig1.figure)

    with col2:
        st.markdown("**Greenness Ratio vs Temperature**")
        fig2 = sns.scatterplot(data=df, x='Urban Greenness Ratio (%)', y='Temperature (°C)')
        st.pyplot(fig2.figure)

    # -------------------- MACHINE LEARNING ---------------------
    st.subheader("🤖 AI-Based Analysis")

    # Regression
    st.markdown("**Linear Regression: Predicting Urban Temperature**")
    features = ['Population Density (people/km²)', 'Land Cover',
                'Urban Greenness Ratio (%)', 'Air Quality Index (AQI)',
                'Energy Consumption (kWh)']
    X = df[features]
    y = df['Temperature (°C)']
    model = LinearRegression()
    model.fit(X, y)
    df['Predicted Temp (°C)'] = model.predict(X)

    st.write(df[['City Name', 'Temperature (°C)', 'Predicted Temp (°C)']].head())

    # Clustering
    st.markdown("**KMeans Clustering: UHI Risk Grouping**")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    kmeans = KMeans(n_clusters=3, random_state=42)
    df['Risk Cluster'] = kmeans.fit_predict(X_scaled)

    fig3 = sns.scatterplot(data=df, x='Urban Greenness Ratio (%)', y='Temperature (°C)', hue='Risk Cluster', palette='coolwarm')
    st.pyplot(fig3.figure)

    # ------------------- RECOMMENDATIONS -----------------------
    st.subheader("📌 City-wise Recommendations")

    def generate_recommendations(row):
        if row['Urban Greenness Ratio (%)'] < 25 and row['Temperature (°C)'] > 30:
            return "🌳 Increase green space and reduce urban heat sources"
        elif row['Air Quality Index (AQI)'] > 150:
            return "🚫 Control air pollution and promote cleaner transport"
        elif row['Population Density (people/km²)'] > 8000:
            return "🏙️ Implement green roofs and vertical gardens"
        else:
            return "✅ Conditions are moderate"

    df['Recommendation'] = df.apply(generate_recommendations, axis=1)

    st.dataframe(df[['City Name', 'Temperature (°C)', 'Urban Greenness Ratio (%)', 'Air Quality Index (AQI)', 'Recommendation']])

